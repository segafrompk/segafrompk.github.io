{"version":3,"sources":["store/actions/checkBalanceAction.js","components/Button.js","components/Balance/Balance.js","store/actions/checkTransactionHistoryAction.js","components/TransactionHistory/TransactionHistoryItem.js","components/TransactionHistory/TransactionHistoryList.js","components/TransactionHistory/TransactionHistory.js","helpers/toasts.js","store/actions/updateInputFieldsAction.js","components/Input.js","components/AddressList/AddressSave.js","store/actions/saveAddressAction.js","components/AddressList/AddressListItem.js","components/AddressList/AddressList.js","components/MakeTransaction/MakeTransaction.js","store/actions/sendTransactionAction.js","store/actions/loginAction.js","views/Account.js","views/Login.js","App.js","reportWebVitals.js","services/ethers.js","store/reducers/loginReducer.js","store/reducers/checkBalanceReducer.js","store/reducers/checkTransactionHistoryReducer.js","store/reducers/sendTransactionReducer.js","store/reducers/saveAddressReducer.js","store/reducers/updateInputFieldsReducer.js","store/index.js","index.js","middleware/checkBalanceMiddleware.js","middleware/checkTransactionHistoryMiddleware.js","middleware/sendTransactionMiddleware.js"],"names":["checkBalanceAction","address","type","payload","Button","buttonText","buttonAction","customClass","refresh","className","onClick","xmlns","width","height","viewBox","d","Balance","getBalance","useDispatch","currentBalance","useSelector","state","balance","useEffect","ethers","utils","isAddress","size","value","includeMargin","renderAs","bgColor","fgColor","formatUnits","defaultProps","checkTransactionHistoryAction","TransactionHistoryItem","transactionData","_hex","from","to","TransactionHistoryList","historyData","listItems","length","map","timestamp","reverse","TransactionHistory","getTransactionHistory","transactionHistory","notifyError","message","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","updateInputFieldsExternalAction","newValueData","PersonalKeyInput","name","placeholder","input","inputValue","updateInputFieldReducer","onChange","newValue","updateInputFieldsAction","AddressSave","savedAddresses","saveEntered","enteredAddress","addContactAddress","enteredName","addContactName","htmlFor","Input","addressToCheck","filter","entry","fieldToUpdate","fieldValue","success","notifySuccess","AddressListItem","savedAddressData","callAction","document","querySelector","focus","AddressList","saveAddressReducer","addressList","addressData","MakeTransaction","wallet","depositAmmountValue","depositAmmount","depositToAddressValue","depositToAddress","isNaN","sendTransactionAction","parseUnits","loginAction","privateKey","Account","window","localStorage","removeItem","Login","inputPersonalKey","personalKeyInput","storedKey","getItem","validKey","key","startsWith","setItem","loginToWallet","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","provider","providers","EtherscanProvider","process","REACT_APP_API_KEYREACT_APP_API_KEY","displayError","walletLogin","personalKey","Wallet","e","console","log","sendTransaction","a","transaction","wait","loginReducer","action","returnBalanceReducer","returnTransactionHistoryReducer","sendTransactionReducer","DEFAULT_STATE","target","allReducers","combineReducers","middleware","applyMiddleware","storeAPI","next","checkBalance","dispatch","getHistory","checkTransactionHistory","history","receipt","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.610672cb.chunk.js","sourcesContent":["export const checkBalanceAction = (address = '') => {\n    return {\n        type: 'CHECK_BALANCE',\n        payload: address,\n    };\n};\n","const Button = ({\n    buttonText = '',\n    buttonAction,\n    customClass = '',\n    refresh = false,\n}) => {\n    return (\n        <button\n            className={customClass + (refresh ? ' refresh-button' : '')}\n            onClick={() => buttonAction()}\n        >\n            {refresh ? (\n                <svg\n                    xmlns='http://www.w3.org/2000/svg'\n                    width='24'\n                    height='24'\n                    viewBox='0 0 24 24'\n                >\n                    <path d='M20.944 12.979c-.489 4.509-4.306 8.021-8.944 8.021-2.698 0-5.112-1.194-6.763-3.075l1.245-1.633c1.283 1.645 3.276 2.708 5.518 2.708 3.526 0 6.444-2.624 6.923-6.021h-2.923l4-5.25 4 5.25h-3.056zm-15.864-1.979c.487-3.387 3.4-6 6.92-6 2.237 0 4.228 1.059 5.51 2.698l1.244-1.632c-1.65-1.876-4.061-3.066-6.754-3.066-4.632 0-8.443 3.501-8.941 8h-3.059l4 5.25 4-5.25h-2.92z' />\n                </svg>\n            ) : (\n                buttonText\n            )}\n        </button>\n    );\n};\n\nexport default Button;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { checkBalanceAction } from '../../store/actions/checkBalanceAction';\nimport QRCode from 'qrcode.react';\nimport Button from '../Button';\nimport PropTypes from 'prop-types';\n\nconst Balance = ({ address }) => {\n    const getBalance = useDispatch();\n    const currentBalance = useSelector((state) => state.balance);\n\n    useEffect(() => {\n        getBalance(checkBalanceAction(address));\n    }, [address, getBalance]);\n\n    const refreshBalance = () => {\n        getBalance(checkBalanceAction(address));\n    };\n\n    return (\n        <div className='display-balance'>\n            {ethers.utils.isAddress(address) && (\n                <div className='qr-address-container'>\n                    <QRCode\n                        size={200}\n                        value={address}\n                        includeMargin={true}\n                        renderAs='svg'\n                        className='qr-code'\n                        bgColor='none'\n                        fgColor='white'\n                    />\n                    <span>{address}</span>\n                </div>\n            )}\n\n            {currentBalance !== '' && (\n                <span className='balance-value'>\n                    {ethers.utils.formatUnits(currentBalance) + ' ETH'}\n                </span>\n            )}\n            <Button buttonAction={refreshBalance} refresh={true} />\n        </div>\n    );\n};\n\nBalance.defaultProps = {\n    address: '',\n};\n\nBalance.propTypes = {\n    address: PropTypes.string,\n};\n\nexport default Balance;\n","export const checkTransactionHistoryAction = (address = []) => {\n    return {\n        type: 'CHECK_TRANSACTION_HISTORY',\n        payload: address,\n    };\n};\n","import { ethers } from 'ethers';\nimport PropTypes from 'prop-types';\n\nconst TransactionHistoryItem = ({ transactionData }) => {\n    return (\n        <div className='transaction-history-item'>\n            {transactionData && (\n                <>\n                    <div className='transaction-history-item-ammount'>\n                        {ethers.utils.formatUnits(transactionData.value._hex)}\n                    </div>\n                    <div className='transaction-history-info'>\n                        <span className='transaction-history-item-from'>\n                            {'From:'} <br /> {transactionData.from}\n                        </span>\n                        <span className='transaction-history-item-to'>\n                            {'To:'} <br /> {transactionData.to}\n                        </span>\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nTransactionHistoryItem.defaultProps = {\n    transactionData: {},\n};\n\nTransactionHistoryItem.propTypes = {\n    transactionData: PropTypes.object,\n};\n\nexport default TransactionHistoryItem;\n","import TransactionHistoryItem from './TransactionHistoryItem';\n\nconst TransactionHistoryList = ({ historyData = [] }) => {\n    let listItems = [];\n    if (historyData && historyData.length > 0) {\n        listItems = historyData\n            .map((transactionData) => (\n                <TransactionHistoryItem\n                    key={transactionData.timestamp}\n                    transactionData={transactionData}\n                />\n            ))\n            .reverse();\n    }\n\n    return <div className='transaction-history-list'>{listItems}</div>;\n};\n\nexport default TransactionHistoryList;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { checkTransactionHistoryAction } from '../../store/actions/checkTransactionHistoryAction';\nimport Button from '../Button';\nimport TransactionHistoryList from './TransactionHistoryList';\n\nconst TransactionHistory = ({ address }) => {\n    const getTransactionHistory = useDispatch();\n    useEffect(() => {\n        getTransactionHistory(checkTransactionHistoryAction(address));\n    }, [address, getTransactionHistory]);\n\n    const refreshTransactionHistory = () => {\n        getTransactionHistory(checkTransactionHistoryAction(address));\n    };\n\n    const transactionHistory = useSelector((state) => state.transactionHistory);\n    return (\n        <div className='transaction-history'>\n            <TransactionHistoryList historyData={transactionHistory} />\n            <Button buttonAction={refreshTransactionHistory} refresh={true} />\n        </div>\n    );\n};\n\nTransactionHistory.defaultProps = {\n    address: '',\n};\n\nTransactionHistory.propTypes = {\n    address: PropTypes.string,\n};\n\nexport default TransactionHistory;\n","import { toast } from 'react-toastify';\n\nexport const notifySuccess = (message = '') => {\n    toast.success(message, {\n        position: 'top-center',\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n    });\n};\n\nexport const notifyError = (message = '') => {\n    toast.error(message, {\n        position: 'top-center',\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n    });\n};\n","export const updateInputFieldsAction = (newValue = {}) => {\n    return {\n        type: 'UPDATE_INPUT',\n        payload: newValue,\n    };\n};\n\nexport const updateInputFieldsExternalAction = (newValueData = {}) => {\n    return {\n        type: 'UPDATE_INPUT_EXTERNAL',\n        payload: newValueData,\n    };\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { updateInputFieldsAction } from '../store/actions/updateInputFieldsAction';\n\nconst PersonalKeyInput = ({ name, customClass, placeholder }) => {\n    const input = useDispatch();\n\n    const updateInput = (newValue) => {\n        input(updateInputFieldsAction(newValue));\n    };\n    const inputValue = useSelector(\n        (state) => state.updateInputFieldReducer[name]\n    );\n    return (\n        <input\n            name={name}\n            className={customClass + ' input-field'}\n            placeholder={placeholder}\n            value={inputValue}\n            onChange={updateInput}\n        />\n    );\n};\n\nexport default PersonalKeyInput;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { saveAddressAction } from '../../store/actions/saveAddressAction';\nimport { notifyError, notifySuccess } from '../../helpers/toasts';\nimport { updateInputFieldsExternalAction } from '../../store/actions/updateInputFieldsAction';\nimport Input from '../Input';\nimport Button from '../Button';\nimport { ethers } from 'ethers';\n\nconst AddressSave = ({ savedAddresses }) => {\n    const saveEntered = useDispatch();\n    const enteredAddress = useSelector(\n        (state) => state.updateInputFieldReducer.addContactAddress\n    );\n    const enteredName = useSelector(\n        (state) => state.updateInputFieldReducer.addContactName\n    );\n    // const savedAddresses = useSelector((state) => state.saveAddressReducer);\n\n    const isProvidedAddressAlreadySaved = (addresses, addressToCheck) => {\n        const matches = addresses.filter(\n            (entry) => entry.address === addressToCheck\n        );\n        return matches.length > 0 ? true : false;\n    };\n\n    const saveEnteredAddress = () => {\n        if (ethers.utils.isAddress(enteredAddress)) {\n            if (\n                !isProvidedAddressAlreadySaved(savedAddresses, enteredAddress)\n            ) {\n                saveEntered(\n                    saveAddressAction({\n                        name: enteredName,\n                        address: enteredAddress,\n                    })\n                );\n                saveEntered(\n                    updateInputFieldsExternalAction({\n                        fieldToUpdate: 'addContactName',\n                        fieldValue: '',\n                    })\n                );\n                saveEntered(\n                    updateInputFieldsExternalAction({\n                        fieldToUpdate: 'addContactAddress',\n                        fieldValue: '',\n                    })\n                );\n                notifySuccess('Address successfully saved');\n            } else {\n                notifyError('Entered address was already saved!');\n            }\n        } else {\n            notifyError('Entered address is not valid!');\n        }\n    };\n\n    return (\n        <div className='add-address'>\n            <label htmlFor='addContactName'>\n                Enter name for address you want to save!\n            </label>\n            <Input\n                name='addContactName'\n                customClass='add-contact-name'\n                placeholder='Name'\n            />\n            <label htmlFor='addContactAddress'>\n                Enter address you want to save!\n            </label>\n            <Input\n                name='addContactAddress'\n                customClass='add-contact-address'\n                placeholder='Ethereum wallet address'\n            />\n            <Button\n                buttonAction={saveEnteredAddress}\n                buttonText='Save address!'\n                customClass='save-address-button'\n            />\n        </div>\n    );\n};\n\nexport default AddressSave;\n","export const saveAddressAction = (addressData) => {\n    return {\n        type: 'SAVE_ADDRESS',\n        payload: addressData,\n    };\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { updateInputFieldsExternalAction } from '../../store/actions/updateInputFieldsAction';\n\nconst AddressListItem = ({ savedAddressData }) => {\n    const callAction = useDispatch();\n\n    const updateAddress = () => {\n        callAction(\n            updateInputFieldsExternalAction({\n                fieldToUpdate: 'depositToAddress',\n                fieldValue: savedAddressData.address,\n            })\n        );\n        document.querySelector('.deposit-amount.input-field').focus();\n    };\n\n    return (\n        <div className='address-list-item' onClick={updateAddress}>\n            <span>{savedAddressData.name + ':'}</span>\n            <span>{savedAddressData.address}</span>\n        </div>\n    );\n};\n\nAddressListItem.defaultProps = {\n    savedAddressData: {\n        name: '',\n        address: '',\n    },\n};\n\nAddressListItem.propTypes = {\n    savedAddressData: PropTypes.object,\n};\n\nexport default AddressListItem;\n","import { useSelector } from 'react-redux';\nimport AddressSave from './AddressSave';\nimport AddressListItem from './AddressListItem';\n\nconst AddressList = () => {\n    const savedAddresses = useSelector((state) => state.saveAddressReducer);\n\n    let addressList = [];\n    if (savedAddresses && savedAddresses.length > 0) {\n        addressList = savedAddresses.map((addressData) => {\n            return (\n                <AddressListItem\n                    key={addressData.address}\n                    savedAddressData={addressData}\n                />\n            );\n        });\n    }\n    return (\n        <div className='address-list-container'>\n            <AddressSave savedAddresses={savedAddresses} />\n            <div className='address-list'>\n                {addressList.length > 0 && addressList}\n            </div>\n        </div>\n    );\n};\n\nexport default AddressList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { ethers, Wallet } from 'ethers';\nimport { sendTransactionAction } from '../../store/actions/sendTransactionAction';\nimport Input from '../Input';\nimport Button from '../Button';\nimport { notifyError } from '../../helpers/toasts';\nimport { updateInputFieldsExternalAction } from '../../store/actions/updateInputFieldsAction';\nimport PropTypes from 'prop-types';\n\nconst MakeTransaction = ({ wallet }) => {\n    const callAction = useDispatch();\n    const depositAmmountValue = useSelector(\n        (state) => state.updateInputFieldReducer.depositAmmount\n    );\n    const depositToAddressValue = useSelector(\n        (state) => state.updateInputFieldReducer.depositToAddress\n    );\n    const balance = useSelector((state) => state.balance);\n\n    const depositEther = () => {\n        if (\n            ethers.utils.isAddress(depositToAddressValue) &&\n            !isNaN(depositAmmountValue) &&\n            depositAmmountValue > 0 &&\n            depositAmmountValue < balance\n        ) {\n            callAction(\n                sendTransactionAction(wallet, {\n                    to: depositToAddressValue,\n                    value: ethers.utils.parseUnits(\n                        depositAmmountValue,\n                        'ether'\n                    ),\n                })\n            );\n            callAction(\n                updateInputFieldsExternalAction({\n                    fieldToUpdate: 'depositToAddress',\n                    fieldValue: '',\n                })\n            );\n            callAction(\n                updateInputFieldsExternalAction({\n                    fieldToUpdate: 'depositAmmount',\n                    fieldValue: '',\n                })\n            );\n        } else if (!ethers.utils.isAddress(depositToAddressValue)) {\n            notifyError('Not a valid ethereum wallet address');\n        } else if (isNaN(depositAmmountValue)) {\n            notifyError('Entered ammount is not a number!');\n        } else if (depositAmmountValue > balance) {\n            notifyError(\"You don't have enouth ETH\");\n        } else if (depositAmmountValue < 0) {\n            notifyError('Ammount of ETH must be positive');\n        }\n    };\n    return (\n        <div className='make-transaction'>\n            <label htmlFor='depositToAddress'>\n                Please enter address you want to send ether to:\n            </label>\n            <Input\n                name='depositToAddress'\n                customClass='deposit-to-address'\n                placeholder='Ethereum wallet address'\n            />\n            <label htmlFor='depositAmmount'>\n                How much ether do you want to deposit?\n            </label>\n            <Input\n                name='depositAmmount'\n                customClass='deposit-amount'\n                placeholder='ETH ammount'\n            />\n            <Button\n                buttonText='Deposit!'\n                customClass='deposit-button'\n                buttonAction={depositEther}\n            />\n        </div>\n    );\n};\n\nMakeTransaction.defaultProps = {\n    wallet: {},\n};\n\nMakeTransaction.propTypes = {\n    wallet: PropTypes.instanceOf(Wallet),\n};\n\nexport default MakeTransaction;\n","export const sendTransactionAction = (wallet, transactionData) => {\n    return {\n        type: 'SEND_TRANSACTION',\n        wallet,\n        transactionData,\n    };\n};\n","export const loginAction = (privateKey = '') => {\n    return {\n        type: 'LOGIN',\n        payload: privateKey,\n    };\n};\n\nexport const logoutAction = () => {\n    return {\n        type: 'LOGOUT',\n    };\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport Balance from '../components/Balance/Balance';\nimport TransactionHistory from '../components/TransactionHistory/TransactionHistory';\nimport AddressList from '../components/AddressList/AddressList';\nimport MakeTransaction from '../components/MakeTransaction/MakeTransaction';\nimport Button from '../components/Button';\nimport { logoutAction } from '../store/actions/loginAction';\n\nconst Account = () => {\n    const wallet = useSelector((state) => state.wallet);\n    const address = wallet.address;\n    const callAction = useDispatch();\n    const logOut = () => {\n        window.localStorage.removeItem('ethereumPersonalKey');\n        callAction(logoutAction());\n    };\n    return (\n        <div className='account-view'>\n            <Button\n                customClass='logout'\n                buttonAction={logOut}\n                buttonText='Log out!'\n            />\n            <Balance address={address} />\n            <MakeTransaction wallet={wallet} />\n            <AddressList />\n            <TransactionHistory address={address} />\n        </div>\n    );\n};\nexport default Account;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { loginAction } from '../store/actions/loginAction';\nimport { notifyError } from '../helpers/toasts';\nimport Input from '../components/Input';\nimport Button from '../components/Button';\nimport { updateInputFieldsExternalAction } from '../store/actions/updateInputFieldsAction';\n\nconst Login = () => {\n    const callAction = useDispatch();\n    const inputPersonalKey = useSelector(\n        (state) => state.updateInputFieldReducer.personalKeyInput\n    );\n\n    const loginToWallet = (key = '') => {\n        let validKey;\n        if (key.startsWith('0x')) {\n            key.length === 66 ? (validKey = true) : (validKey = false);\n        } else if (key.length === 64) {\n            key = '0x' + key;\n            validKey = true;\n        } else {\n            validKey = false;\n        }\n\n        if (validKey) {\n            window.localStorage.setItem('ethereumPersonalKey', key);\n            callAction(loginAction(key));\n            callAction(\n                updateInputFieldsExternalAction({\n                    fieldToUpdate: 'personalKeyInput',\n                    fieldValue: '',\n                })\n            );\n        } else {\n            notifyError('Personal key is not valid!');\n        }\n    };\n\n    const storedKey = window.localStorage.getItem('ethereumPersonalKey');\n    if (storedKey) {\n        callAction(loginAction(storedKey));\n        return <div>You are being logged in!</div>;\n    } else {\n        return (\n            <div className='login-view'>\n                <label htmlFor='personalKeyInput'>\n                    Please insert your wallet`s personal key\n                </label>\n                <Input\n                    name='personalKeyInput'\n                    customClass='personal-key-input'\n                    placeholder='Personal key'\n                />\n                <Button\n                    buttonAction={() => loginToWallet(inputPersonalKey)}\n                    buttonText='Submit'\n                />\n            </div>\n        );\n    }\n};\n\nexport default Login;\n","import { ethers } from 'ethers';\nimport { useSelector } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport Account from './views/Account';\nimport Login from './views/Login';\n\nfunction App() {\n    const wallet = useSelector((state) => state.wallet);\n    return (\n        <div className='App'>\n            <ToastContainer />\n            {wallet.address && ethers.utils.isAddress(wallet.address) && (\n                <Account />\n            )}\n            {(!wallet.address || !ethers.utils.isAddress(wallet.address)) && (\n                <Login />\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ethers } from 'ethers';\nimport { toast } from 'react-toastify';\n\nexport const provider = new ethers.providers.EtherscanProvider(\n    process.env.REACT_APP_NETWORK,\n    process.env.REACT_APP_API_KEYREACT_APP_API_KEY\n);\n\nconst displayError = (message) => {\n    toast.error(message, {\n        position: 'top-center',\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n    });\n};\n\nexport const walletLogin = (personalKey) => {\n    if (typeof personalKey == 'string') {\n        try {\n            const wallet = new ethers.Wallet(personalKey, provider);\n            return wallet;\n        } catch (e) {\n            console.log(e);\n        }\n    } else {\n        displayError('Invalid personal key');\n    }\n};\n\nexport const checkBalance = (address) => {\n    if (ethers.utils.isAddress(address)) {\n        try {\n            const balance = provider.getBalance(address);\n            return balance;\n        } catch (e) {\n            console.log(e);\n        }\n    } else {\n        displayError('Invalid wallet address');\n    }\n};\n\nexport const checkTransactionHistory = (address) => {\n    if (ethers.utils.isAddress(address)) {\n        try {\n            const history = provider.getHistory(address);\n            return history;\n        } catch (e) {\n            console.log(e);\n        }\n    } else {\n        displayError('Invalid wallet address');\n    }\n};\n\nexport const sendTransaction = async (wallet, transactionData) => {\n    try {\n        const transaction = await wallet.sendTransaction(transactionData);\n        await transaction.wait();\n        return transaction;\n    } catch (e) {\n        //TODO add snackbar to notify about address error\n        console.log(e);\n    }\n};\n","import { walletLogin } from '../../services/ethers';\n\nconst loginReducer = (state = {}, action) => {\n    switch (action.type) {\n        case 'LOGIN':\n            return (state = walletLogin(action.payload) ?? state);\n        case 'LOGOUT':\n            return (state = {});\n        default:\n            return state;\n    }\n};\n\nexport default loginReducer;\n","const returnBalanceReducer = (state = '', action) => {\n    switch (action.type) {\n        case 'RETURN_BALANCE':\n            return (state = action.payload._hex ?? state);\n        default:\n            return state;\n    }\n};\nexport default returnBalanceReducer;\n","const returnTransactionHistoryReducer = (state = '', action) => {\n    switch (action.type) {\n        case 'RETURN_TRANSACTION_HISTORY':\n            return (state = action.payload ?? state);\n        default:\n            return state;\n    }\n};\nexport default returnTransactionHistoryReducer;\n","const sendTransactionReducer = (state = {}, action) => {\n    switch (action.type) {\n        case 'RETURN_TRANSACTION_RECEIPT':\n            return (state = action.payload ?? state);\n        default:\n            return state;\n    }\n};\n\nexport default sendTransactionReducer;\n","const saveAddressReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SAVE_ADDRESS':\n            return (state = [...state, action.payload]);\n        default:\n            return state;\n    }\n};\n\nexport default saveAddressReducer;\n","const DEFAULT_STATE = {\n    personalKeyInput: '',\n    addContactName: '',\n    addContactAddress: '',\n    depositToAddress: '',\n    depositAmmount: '',\n};\n\nconst updateInputFieldReducer = (state = DEFAULT_STATE, action) => {\n    switch (action.type) {\n        case 'UPDATE_INPUT':\n            return (state = {\n                ...state,\n                [action.payload.target.name]: action.payload.target.value,\n            });\n        case 'UPDATE_INPUT_EXTERNAL':\n            return (state = {\n                ...state,\n                [action.payload.fieldToUpdate]: action.payload.fieldValue,\n            });\n        default:\n            return state;\n    }\n};\n\nexport default updateInputFieldReducer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './reducers/loginReducer';\nimport returnBalanceReducer from './reducers/checkBalanceReducer';\nimport returnTransactionHistoryReducer from './reducers/checkTransactionHistoryReducer';\nimport sendTransactionReducer from './reducers/sendTransactionReducer';\nimport saveAddressReducer from './reducers/saveAddressReducer';\nimport updateInputFieldReducer from './reducers/updateInputFieldsReducer';\n\nconst allReducers = combineReducers({\n    wallet: loginReducer,\n    balance: returnBalanceReducer,\n    transactionHistory: returnTransactionHistoryReducer,\n    sendTransactionReducer,\n    saveAddressReducer,\n    updateInputFieldReducer,\n});\n\nexport default allReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport allReducers from './store';\nimport { checkBalanceMiddleware } from './middleware/checkBalanceMiddleware';\nimport { checkTransactionHistoryMiddleware } from './middleware/checkTransactionHistoryMiddleware';\nimport { sendTransactionMiddleware } from './middleware/sendTransactionMiddleware';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport './assets/style/style.scss';\n\nconst middleware = applyMiddleware(\n    checkBalanceMiddleware,\n    checkTransactionHistoryMiddleware,\n    sendTransactionMiddleware\n);\nconst store = createStore(allReducers, composeWithDevTools(middleware));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { checkBalance } from '../services/ethers';\n\nexport const checkBalanceMiddleware = (storeAPI) => (next) => (action) => {\n    if (action.type === 'CHECK_BALANCE') {\n        checkBalance(action.payload).then((balance) => {\n            storeAPI.dispatch({ type: 'RETURN_BALANCE', payload: balance });\n        });\n    }\n\n    return next(action);\n};\n","import { checkTransactionHistory } from '../services/ethers';\n\nexport const checkTransactionHistoryMiddleware = (storeAPI) => (next) => (\n    action\n) => {\n    if (action.type === 'CHECK_TRANSACTION_HISTORY') {\n        checkTransactionHistory(action.payload).then((history) => {\n            storeAPI.dispatch({\n                type: 'RETURN_TRANSACTION_HISTORY',\n                payload: history,\n            });\n        });\n    }\n\n    return next(action);\n};\n","import { sendTransaction } from '../services/ethers';\n\nexport const sendTransactionMiddleware = (storeAPI) => (next) => (action) => {\n    if (action.type === 'SEND_TRANSACTION') {\n        sendTransaction(action.wallet, action.transactionData).then(\n            (receipt) => {\n                storeAPI.dispatch({\n                    type: 'RETURN_TRANSACTION_RECEIPT',\n                    payload: receipt,\n                });\n            }\n        );\n    }\n\n    return next(action);\n};\n"],"sourceRoot":""}